const getImage=e=>new Promise((t=>{const o=document.createElement("img");o.onload=()=>t(o),o.src=e})),readPixels=async({data:e,debug:t=!1})=>{let o,a,d;t&&console.log("[read-pixels] starting to read with",{data:e,debug:t}),e instanceof Promise&&(e=await e),"object"==typeof e&&"function"==typeof e.arrayBuffer?e=await e.arrayBuffer():"object"==typeof e&&e.buffer instanceof ArrayBuffer&&(e=e.buffer),e instanceof ArrayBuffer?"undefined"!=typeof Blob&&(o=new Blob([e],{type:"image/png"}),a=d=URL.createObjectURL(o)):"string"==typeof e&&e.startsWith("data:")&&(a=e);const n=await getImage(a);console.log("[read-pixels] img:",n);const{height:i,width:r}=n,s=document.createElement("canvas");s.height=i,s.width=r;const l=s.getContext("2d");l.drawImage(n,0,0,r,i);const f=l.getImageData(0,0,r,i);t&&console.log("[read-pixels] imageData:",f);const{data:g}=f;t&&console.log("[read-pixels] pixels:",g),d&&(t&&console.log("[read-pixels] revoking temporary url:",d),URL.revokeObjectURL(d));const c={height:i,pixels:g,width:r};return t&&console.log("[read-pixels] finishing with",c),c};async function readJPG({data:e,debug:t=!1}){t&&console.log("[read-jpeg] starting with",{data:e,debug:t});const o=await readPixels({data:e,debug:t});return t&&console.log("[read-jpeg] finishing with",{data:e,debug:t}),o}"undefined"!=typeof window&&(window.readPixels=readPixels),"undefined"!=typeof module&&(module.exports=readPixels),"undefined"!=typeof self&&(self.readPixels=readPixels),"object"==typeof module&&"object"==typeof module.exports&&(module.exports=readJPG),"undefined"!=typeof window&&(window.readJPG=readJPG),"undefined"!=typeof self&&(self.readJPG=readJPG);