const getImage=e=>new Promise(((t,o)=>{const a=document.createElement("img");a.onload=()=>t(a),a.onerror=()=>o("Image not loaded"),a.src=e})),readPixels=async({data:e,debug:t=!1})=>{let o,a,n;t&&console.log("[read-pixels] starting to read with",{data:e,debug:t}),e instanceof Promise&&(e=await e),"object"==typeof e&&"function"==typeof e.arrayBuffer?e=await e.arrayBuffer():"object"==typeof e&&e.buffer instanceof ArrayBuffer&&(e=e.buffer),e instanceof ArrayBuffer?"undefined"!=typeof Blob&&(o=new Blob([e],{type:"image/png"}),a=n=URL.createObjectURL(o)):"string"==typeof e&&e.startsWith("data:")&&(a=e);const i=await getImage(a);t&&console.log("[read-pixels] img:",i);const{height:r,width:s}=i,d=document.createElement("canvas");d.height=r,d.width=s;const l=d.getContext("2d");l.drawImage(i,0,0,s,r);const f=l.getImageData(0,0,s,r);t&&console.log("[read-pixels] imageData:",f);const{data:c}=f;t&&console.log("[read-pixels] pixels:",c),n&&(t&&console.log("[read-pixels] revoking temporary url:",n),URL.revokeObjectURL(n));const g={height:r,pixels:c,width:s};return t&&console.log("[read-pixels] finishing with",g),g};"undefined"!=typeof window&&(window.readPixels=readPixels),"undefined"!=typeof module&&(module.exports=readPixels),"undefined"!=typeof self&&(self.readPixels=readPixels);